@page "/edit/{id}"

@inject DataService dataService;
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager

<MudContainer>
    <MudTextField Label="Name" HelperText="Name of the expense item" @bind-Value="@item.Name" Variant="Variant.Outlined" />
    <br />
    <MudTextField Label="Description" HelperText="Optional" @bind-Value="@item.Description" Variant="Variant.Outlined" />
    <br />
    <MudDatePicker Label="When is this due?" @bind-Date="@_selectedDate" Variant="Variant.Outlined" />
    <br />
    <MudNumericField @bind-Value="@item.Amount" Label="Expense Amount" Min="0" Variant="Variant.Outlined" />
    <br />
    <MudSelect T="Periods" Label="Repeats" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" MultiSelection="false" @bind-Value="@item.Period">
        <MudSelectItem T="Periods" Value="Periods.None">Never</MudSelectItem>
        <MudSelectItem T="Periods" Value="Periods.Monthly">Monthly</MudSelectItem>
        <MudSelectItem T="Periods" Value="Periods.Quarterly">Quarterly</MudSelectItem>
        <MudSelectItem T="Periods" Value="Periods.Yearly">Yearly</MudSelectItem>
    </MudSelect>

    <br />
    <br />

    <MudButtonGroup OverrideStyles="false" Style="width:100%;">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="@(() => navigationManager.NavigateTo("/plan"))">Cancel</MudButton>
        <MudSpacer />
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnAdd">Save</MudButton>
    </MudButtonGroup>
</MudContainer>

@code {
    [Parameter]
    public string id { get; set; }

    Item item = new();
    DateTime? _selectedDate;

    bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        var i = int.Parse(id);
        dataService.UpdateTitle.Invoke("Edit Expense");
        dataService.showArrows = false;

        item = dataService.Instance.BaseBudgetItems.SingleOrDefault(a => a.id == i);
        _selectedDate = item.Date;

        isLoading = false;
    }

    private async void OnAdd()
    {
        if (string.IsNullOrWhiteSpace(item.Name))
        {
            Snackbar.Add("You must enter a name for the expense", Severity.Warning);
            return;
        }
        if (item.Amount <= 0)
        {
            Snackbar.Add("You must enter an expense amount", Severity.Warning);
            return;
        }
        if (!_selectedDate.HasValue)
        {
            Snackbar.Add("You must enter a date", Severity.Warning);
            return;
        }

        item.Date = _selectedDate.Value;
        item.DayOfMonth = item.Date.Day;

        var _original = dataService.Instance.BaseBudgetItems.SingleOrDefault(a => a.id == item.BaseID);

        if (_original is not null)
        {
            _original.Name = item.Name;
            _original.Date = item.Date;
            _original.Amount = item.Amount;
            _original.DayOfMonth = item.DayOfMonth;
            _original.Description = item.Description;
            _original.Period = item.Period;
        }

        foreach (var w in dataService.Instance.WorkingItems)
        {
            if (w.BaseID == item.BaseID && w.Date.Month >= item.Date.Month && w.Date.Year >= item.Date.Year && !w.IsCompleted)
            {
                w.Name = item.Name;

                w.Amount = item.Amount;
                w.DayOfMonth = item.DayOfMonth;
                w.Description = item.Description;
                w.Period = item.Period;
            }

        }

        dataService.SaveData();
        Snackbar.Add("Expense Saved Successfully", Severity.Success);
        
        navigationManager.NavigateTo("/plan");
    }
}
